% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kafka_producer_class.R
\name{kafka_producer_class}
\alias{kafka_producer_class}
\title{R6 Class for Kafka Producer}
\description{
R6 Class for Kafka Producer

R6 Class for Kafka Producer
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{java_producer}}{reference to the underlying Java object
Initialize}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{kafka_producer_class$new()}}
\item \href{#method-finalize}{\code{kafka_producer_class$finalize()}}
\item \href{#method-start}{\code{kafka_producer_class$start()}}
\item \href{#method-end}{\code{kafka_producer_class$end()}}
\item \href{#method-restart}{\code{kafka_producer_class$restart()}}
\item \href{#method-running}{\code{kafka_producer_class$running()}}
\item \href{#method-props}{\code{kafka_producer_class$props()}}
\item \href{#method-send}{\code{kafka_producer_class$send()}}
\item \href{#method-clone}{\code{kafka_producer_class$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new producer object.
Instead of \code{kafka_producer_class$new()} one can use \code{kafka_producer()}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_producer_class$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{self} for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-finalize}{}}}
\subsection{Method \code{finalize()}}{
Code run when object is removed from session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_producer_class$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-start"></a>}}
\if{latex}{\out{\hypertarget{method-start}{}}}
\subsection{Method \code{start()}}{
Spin up producer and connect it to Kafka cluster
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_producer_class$start()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{self} for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-end"></a>}}
\if{latex}{\out{\hypertarget{method-end}{}}}
\subsection{Method \code{end()}}{
Disconnect producer from Kafka cluster
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_producer_class$end()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{self} for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-restart"></a>}}
\if{latex}{\out{\hypertarget{method-restart}{}}}
\subsection{Method \code{restart()}}{
Disconnect and reconnect producer from Kafka cluster
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_producer_class$restart()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{self} for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-running"></a>}}
\if{latex}{\out{\hypertarget{method-running}{}}}
\subsection{Method \code{running()}}{
Whether or not producer is active (has been started or not)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_producer_class$running()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE/FALSE
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-props"></a>}}
\if{latex}{\out{\hypertarget{method-props}{}}}
\subsection{Method \code{props()}}{
Retrieving current current set of properties.
If properties are supplied via props parameter thos properties will
be set.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_producer_class$props(..., .properties = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{a series of properties provided as \code{key = "values"}}

\item{\code{.properties}}{a list of properties provided as  \code{.properties = list(key = "values", ...)}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
returns a list of properties
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-send"></a>}}
\if{latex}{\out{\hypertarget{method-send}{}}}
\subsection{Method \code{send()}}{

\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_producer_class$send(topic, msg, key = NULL, partition = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{topic}}{topic to send messaged to}

\item{\code{msg}}{message to be send or character vector of messages to be send}

\item{\code{key}}{TBD}

\item{\code{partition}}{TBD}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
returns self for method chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{kafka_producer_class$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
